add_layer {P P.X P.Y P.Z P.x P.green P.blue P.alpha P.X}
Group {
name emFog
inputs 2
knobChanged "import nuke\n\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\n### INPUT CREATION\n## UTILS Input\ncheckutils = nuke.toNode('InputUTILS')\n\nif n.knob('input_utils').value() ==False:\n    if checkutils:\n        nuke.delete(checkutils)  # Delete 'Inpututils' if it exists     \nelse:\n    if not checkutils: \n        matteInput = nuke.createNode('Input', \"name InputUTILS\", inpanel=False) # Create Input node \n        enableutils = nuke.toNode('SwitchUTILS')\n        \n        if matteInput:\n            enableutils.setInput(1, matteInput)\n                                    \n            # Adjust 'Inpututils' position relative to 'enable_utils'\n            matteInput.setYpos(enableutils.ypos() - 50)  # Adjusting Y-position, not X-position\n            matteInput.setXpos(enableutils.xpos())       # Aligning X-position\n\n###KNOB CHANGED\n##mode\nif n\['mode'].value() == 'P_World':\n    n\['z_near'].setVisible(False)\n    n\['z_far'].setVisible(False)\n    n\['units'].setVisible(True)\nelse:\n    n\['z_near'].setVisible(True)\n    n\['z_far'].setVisible(True)\n    n\['units'].setVisible(False)\n    \n## Near color? (Checkbox)\nif n\['near_color_q'].value() == True:\n    n.knobs()\['color_1'].setVisible(True)\n    n.knobs()\['color'].setVisible(True)\nelse:\n    n.knobs()\['color_1'].setVisible(False)\n    n.knobs()\['color'].setVisible(True)\n\n### PICKER\n##Depth\nzdepth = nuke.toNode(f\"Input_ZDepth\")\n# Near Values\nif k.name() == 'near':\n    posFar = n\['near'].value()  # The position picked\n    \n    # Check if proxy mode is active\n    if n\['mode'].value() == 'ZDepth':             \n        # Sample RGB values from the node\n        r = zdepth.sample('red',  posFar\[0], posFar\[1],)\n                \n        # Set the z_near knob with the sampled values\n        n\['z_near'].setValue(\[r])\n            \n# Far Values\nif k.name() == 'far':\n    posFar = n\['far'].value()  # The position picked\n    \n    if n\['mode'].value() == 'ZDepth':             \n        # Sample RGB values from the node\n        r = zdepth.sample('red',  posFar\[0], posFar\[1],)\n            \n        # Set the z_far knob with the sampled values\n        n\['z_far'].setValue(\[r])\n\n\n##P_World\npworld = nuke.toNode(f\"Input_PWorld\")\n# Near Values\nif k.name() == 'near':\n    posFar = n\['near'].value()  # The position picked\n    animated = nuke.thisKnob().isAnimated()\n    \n    # Check if proxy mode is active\n    if nuke.root().knob('proxy').value():\n        nuke.message('You have to disable proxy mode to use this feature.')\n    else:\n        # Handle 'P_World' mode\n        if n\['mode'].value() == 'P_World':             \n            # Sample RGB values from the node\n            r = pworld.sample('red',  posFar\[0], posFar\[1],)\n            g = pworld.sample('green', posFar\[0], posFar\[1])\n            b = pworld.sample('blue',  posFar\[0], posFar\[1])\n            \n            n = nuke.thisNode()\n            if animated:\n                if not n.knob('near_3d').isAnimated():\n                    n.knob('near_3d').setAnimated()\n            else:\n                n.knob('near_3d').clearAnimated()\n                \n            # Set the near_3d knob with the sampled values\n            n\['near_3d'].setValue(\[r, g, b])\n            \n# Far Values\nif k.name() == 'far':\n    pworld = nuke.toNode(f\"Input_PWorld\")\n    posFar = n\['far'].value()  # The position picked\n    animated = nuke.thisKnob().isAnimated()\n    \n    # Check if proxy mode is active\n    if nuke.root().knob('proxy').value():\n        nuke.message('You have to disable proxy mode to use this feature.')\n    else:\n        # Handle 'Static' mode\n        if n\['mode'].value() == 'P_World':             \n            # Sample RGB values from the node\n            r = pworld.sample('red',  posFar\[0], posFar\[1],)\n            g = pworld.sample('green', posFar\[0], posFar\[1])\n            b = pworld.sample('blue',  posFar\[0], posFar\[1])\n            \n            if animated:\n                if not n.knob('far_3d').isAnimated():\n                    n.knob('far_3d').setAnimated()\n            else:\n                n.knob('far_3d').clearAnimated()\n                \n            # Set the far_3d knob with the sampled values\n            n\['far_3d'].setValue(\[r, g, b])"
tile_color 0x5289c4ff
label "\[value mode]"
addUserKnob {20 User l emFog t "Make a fake Fog using P_World or ZDepth AOVs."}
addUserKnob {4 preview t "Different previews are designed to check the Final Image, the fog, and the fog with color and glow stuff." M {"Final Image" Fog "Fog with Color" Glow "" "" "" ""}}
addUserKnob {26 ""}
addUserKnob {4 mode t "Fog Mode. P_World works with P (position) AOV and ZDepth with depth.Z AOV. P_World mode keeps the fog at the same position and ZDepth follows the camera movement. " M {P_World ZDepth "" ""}}
addUserKnob {26 gap04 l " " -STARTLINE T " "}
addUserKnob {12 near l "near pick" t "Picker of near point." -STARTLINE}
near {1138 46}
addUserKnob {26 gap03 l " " T "                        "}
addUserKnob {12 far l "far pick" t "Picker of far point." -STARTLINE}
far {394 538}
addUserKnob {13 near_3d +INVISIBLE}
near_3d {43.74595261 -88.74176025 -1632.024902}
addUserKnob {13 far_3d +INVISIBLE}
far_3d {-1881.541382 431.8714294 -22075.2832}
addUserKnob {7 z_near l near +HIDDEN R 0 1000}
z_near 2244.074951
addUserKnob {7 z_far l far +HIDDEN R 0 1000}
z_far 121115.7969
addUserKnob {26 ""}
addUserKnob {26 text_fog l "@b;FOG" T " "}
addUserKnob {6 near_color_q l "Near Color?" t "It adds an extra color in the 'near' position. Useful when you are using 'ZDepth' mode but you can use 'P_World' mode too." -STARTLINE}
addUserKnob {6 premultiply_fog l "Premultiply Fog" t "Premultiply the Fog, ideally if you want to get a smooth result." -STARTLINE}
premultiply_fog true
addUserKnob {7 opacity t "Opacity of the fog."}
opacity 0.25
addUserKnob {6 color_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
color_panelDropped true
addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
color_rgb_panelDropped true
addUserKnob {41 color_1 l "color near" t "Color for the near position." +HIDDEN T color_near.color}
addUserKnob {41 color l "color far" t "Color for the far position." T color_far.color}
addUserKnob {7 units t "Units knob works with small values for big places and high values for small ones."}
units 0.01
addUserKnob {6 color_rgb_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
color_rgb_panelDropped true
addUserKnob {26 gap07 l " " T " "}
addUserKnob {26 text_glow l "@b;GLOW" T " "}
addUserKnob {6 enable_glow l "Enable Glow" t "Enables the Glow Effect. This Glow follows the Mask of the Fog." -STARTLINE}
enable_glow true
addUserKnob {41 sample T emGlow.sample}
addUserKnob {41 intensity T emGlow.intensity}
addUserKnob {41 value l tint T emGlow.value}
addUserKnob {41 size T emGlow.size}
addUserKnob {41 overscan T emGlow.overscan}
addUserKnob {41 crop l "enable crop" -STARTLINE T emGlow.crop}
addUserKnob {26 ""}
addUserKnob {26 "" l mask T ""}
addUserKnob {41 maskChannelMask l "" -STARTLINE T Merge1.maskChannelMask}
addUserKnob {41 inject -STARTLINE T Merge1.inject}
addUserKnob {41 invert_mask l invert -STARTLINE T Merge1.invert_mask}
addUserKnob {41 fringe -STARTLINE T Merge1.fringe}
addUserKnob {41 mix T Merge1.mix}
addUserKnob {26 ""}
addUserKnob {26 autor l "" +STARTLINE T "<font color=\"grey\">emFog v1.6 | emateofabregas.com | 2024 </font>"}
addUserKnob {20 tab_inputs_utils l "Inputs UTILS" t "Place the AOV channels here. "}
addUserKnob {6 input_utils l "Input UTILS" t "Creates an input UTILS if you have the Data AOV in a different brunch. Ideally, work always in that way so as not to destroy the data in your AOVS." +STARTLINE}
addUserKnob {6 unpremultiply l "Unpremultiply UTILS" t "Unpremultiply the UTILS/Data AOVS to get rid of matte lines." -STARTLINE}
unpremultiply true
addUserKnob {41 in l P_World t "Set up P AOV here. " T Input_PWorld.in}
addUserKnob {41 in_1 l ZDepth t "Set up ZDepth AOV here." T Input_ZDepth.in}
}
Input {
inputs 0
name InputImg
label 0
xpos 0
ypos -139
}
Dot {
name Dot1
xpos 34
ypos -58
}
set N24dc5800 [stack 0]
Switch {
which 1
name SwitchUTILS
label "\[value which]"
xpos -210
ypos -67
disable {{"!\[exists input1]"}}
}
AddChannels {
channels alpha
color 1
format_size true
name AddChannels1
xpos -210
ypos -13
}
Shuffle {
in P
in2 rgba
alpha alpha2
name Input_PWorld
xpos -210
ypos 29
}
set N24e0e800 [stack 0]
Shuffle {
in depth
in2 rgba
alpha red
name Input_ZDepth
xpos -549
ypos 29
}
Unpremult {
name Unpremult2
xpos -549
ypos 69
disable {{!parent.unpremultiply}}
}
Grade {
channels rgba
blackpoint {{parent.z_near}}
whitepoint {{parent.z_far}}
white 0.5
multiply {{parent.opacity}}
white_clamp true
name Grayscale
xpos -549
ypos 110
}
set N24e0f400 [stack 0]
push 0
Constant {
inputs 0
color {0.1910087764 0.1813456118 0.3600000143 1}
name color_near
xpos -686
ypos 206
disable {{!parent.near_color_q}}
}
set N96ae5c00 [stack 0]
Merge2 {
inputs 2+1
operation mask
name Merge8
xpos -549
ypos 309
}
push $N24e0f400
push $N24e0f400
Invert {
channels rgba
name Invert1
xpos -393
ypos 110
}
Merge2 {
inputs 2
operation from
name Merge3
xpos -393
ypos 179
}
push 0
Constant {
inputs 0
color {0.239199 0.28248 0.36 1}
name color_far
xpos -682
ypos 121
}
set Nb9e64000 [stack 0]
Merge2 {
inputs 2+1
operation mask
name Merge7
xpos -393
ypos 299
}
Merge2 {
inputs 2
operation plus
output {rgba.red rgba.green rgba.blue -rgba.alpha}
name Merge4
xpos -393
ypos 384
}
push $N24e0e800
Unpremult {
name Unpremult1
xpos -210
ypos 67
disable {{!parent.unpremultiply}}
}
set N24e0fc00 [stack 0]
Add {
channels rgb
value {{-parent.near_3d.x} {-parent.near_3d.y} {-parent.near_3d.z} 0}
name near
xpos -291
ypos 110
}
Expression {
channel3 rgba
expr3 "smoothstep(0,1.36203, clamp(1-abs(r)*near) ) * smoothstep(0,1.35494, clamp(1-abs(g)*near) ) * smoothstep(0,1.36203, clamp(1-abs(b)*near))"
name near_convert
xpos -291
ypos 148
addUserKnob {20 User}
addUserKnob {7 near}
near {{0.002*units}}
}
push $N24e0fc00
Add {
channels rgb
value {{-parent.far_3d.x} {-parent.far_3d.y} {-parent.far_3d.z} 0}
name far
xpos -139
ypos 109
}
Expression {
channel3 rgba
expr3 "smoothstep(0,1, clamp(1-abs(r)*far) ) * smoothstep(0,1, clamp(1-abs(g)*far) ) * smoothstep(0,1, clamp(1-abs(b)*far))"
name far_convert
xpos -139
ypos 149
addUserKnob {20 User}
addUserKnob {7 far}
far {{0.002*units}}
}
Merge2 {
inputs 2
operation from
name Merge2
xpos -203
ypos 193
}
Clamp {
channels rgba
maximum_enable false
name Clamp
label black_values
xpos -203
ypos 232
}
set Nc6697400 [stack 0]
Dot {
name Dot5
xpos -56
ypos 241
}
Dot {
name Dot3
xpos -56
ypos 337
}
push $Nc6697400
push $Nb9e64000
push $N96ae5c00
Merge2 {
inputs 2+1
operation plus
output {rgba.red rgba.green rgba.blue -rgba.alpha}
name Merge9
xpos -203
ypos 286
}
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy1
xpos -203
ypos 328
}
Switch {
inputs 2
which {{parent.mode}}
name Switch1_mode
xpos -203
ypos 384
}
Grade {
channels rgba
white {{parent.opacity}}
name Opacity
xpos -203
ypos 430
}
set N97aea800 [stack 0]
Premult {
name Premult6
xpos -203
ypos 479
disable {{!parent.premultiply_fog}}
}
Dot {
name Dot2
xpos -169
ypos 528
}
set N25ed6000 [stack 0]
push $N24dc5800
Dot {
name Dot4
xpos 182
ypos -58
}
Input {
inputs 0
name InputMask
label 2
xpos 268
ypos 519
number 1
}
Switch {
inputs 2
which 1
name Switch
xpos 148
ypos 525
disable {{"\[exists parent.input1]"}}
}
push $N25ed6000
push $N24dc5800
Merge2 {
inputs 2+1
operation plus
Achannels rgb
name Merge1
xpos 0
ypos 525
}
Group {
inputs 2
name emGlow
tile_color 0xf2873aff
label "\[value in]"
xpos 0
ypos 594
disable {{!parent.enable_glow}}
addUserKnob {20 User l emGlow t "Exponential Glow effect. "}
addUserKnob {6 glow_only l "Glow Only" t "View Glow Effect." +STARTLINE}
glow_only {{"parent.preview ==3"}}
addUserKnob {6 clamp_alpha l "Clamp Alpha" t "It clamps the alpha channel overall." -STARTLINE}
clamp_alpha true
addUserKnob {41 in l channels t "Channels where the glow is affected. By default is 'rgb' channel. The alpha is always getting by the beauty/rgba layer." T Shuffle1.in}
addUserKnob {26 main_text l "@b;Main" t "Main section."}
addUserKnob {3 sample t "Resolution in the effect. More samples = smooth transition. Max samples: 11."}
sample 7
addUserKnob {7 anamorph t "Simulates anamorphic lens flares by altering the default 1:1 flare shape."}
anamorph 1
addUserKnob {7 intensity t "Intensity of the effect (Glow)." R 0 10}
intensity 1
addUserKnob {6 tint_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
tint_panelDropped true
addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
color_rgb_panelDropped true
addUserKnob {41 value l tint t "Tint color of the effect (Glow)." T Multiply1.value}
addUserKnob {7 size t "Size of the effect (Glow)." R 0.0001 100}
size 10
addUserKnob {7 b l "falloff mix" t "It makes the transition smooth. (1) Sharp, more than 1 value is smoother. Falloff min and max knobs are using an exponential expression and falloff min is the minimum expression and max is the maximum expression." R 1 10}
b 1
addUserKnob {7 a l "falloff max" t "It makes the transition smooth. (1) Sharp, more than 1 value is smoother. Falloff min and max knobs are using an exponential expression and falloff min is the minimum expression and max is the maximum expression." R 1 10}
a 2
addUserKnob {7 highlights t "Checkbox 'enable highlights' to make that work. It clamps the highlight values (maximum) before the (Glow) effect. " R 0 10}
highlights 1
addUserKnob {6 enable_highlights l "enable highlights" t "Checbox this box if you want to play with highlights (maxiumum values)." -STARTLINE}
addUserKnob {7 tolerance t "It makes a \"Contrast\" in black values in the effect (Glow)." R 0 10}
addUserKnob {7 overscan t "How many percent of the crop is overscanning." R 0 100}
overscan 20
addUserKnob {6 crop l "enable crop" t "Crops overscan to root format. " -STARTLINE}
addUserKnob {41 black_clamp l "black clamp" t "Black clamp overall (includes the alpha channel)." T Grade.black_clamp}
addUserKnob {41 white_clamp l "white clamp" t "White clamp overall (includes the alpha channel)." -STARTLINE T Grade.white_clamp}
addUserKnob {26 ""}
addUserKnob {26 _1 l mask T ""}
addUserKnob {41 maskChannelInput l "" -STARTLINE T Merge3.maskChannelInput}
addUserKnob {41 inject -STARTLINE T Merge3.inject}
addUserKnob {41 invert_mask l invert -STARTLINE T Merge3.invert_mask}
addUserKnob {41 fringe -STARTLINE T Merge3.fringe}
addUserKnob {41 mix t "Mix of the Mask Input." T Merge3.mix}
addUserKnob {26 ""}
addUserKnob {26 Autor l "" +STARTLINE T "<font color=\"grey\">emGlow v1.8 | emateofabregas.com | 2024 </font>"}
}
Input {
inputs 0
name InputMask
xpos 106
ypos 37
number 1
}
Input {
inputs 0
name InputImg
xpos -84
ypos 36
}
Dot {
name Dot1
xpos -50
ypos 83
}
set Nc66c1c00 [stack 0]
Shuffle {
in rgb
in2 rgba
alpha alpha2
name Shuffle1
xpos -8
ypos 80
}
Merge2 {
inputs 2
operation mask
name Merge3
xpos 106
ypos 80
disable {{"!\[exists parent.input1]"}}
}
set N7b1ee800 [stack 0]
push $N7b1ee800
Grade {
inputs 1+1
channels rgba
white {{0.0001+parent.intensity*0.1}}
add {{-parent.tolerance*0.001}}
maskChannelMask none
name Grade
xpos 106
ypos 110
}
Clamp {
channels rgb
minimum_enable false
maximum {{parent.highlights}}
maximum_enable {{parent.enable_highlights}}
name Clamp1
xpos 106
ypos 134
}
set N7b1ee400 [stack 0]
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*1024} {parent.BlurMaster.size*pow(a,b)*1024}}
crop false
name Blur10
label "\[value size.w]"
xpos 1172
ypos 174
disable {{"sample < 11"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*512} {parent.BlurMaster.size*pow(a,b)*512}}
crop false
name Blur9
label "\[value size.w]"
xpos 1070
ypos 176
disable {{"sample < 10"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*256} {parent.BlurMaster.size*pow(a,b)*256}}
crop false
name Blur8
label "\[value size.w]"
xpos 973
ypos 176
disable {{"sample < 9"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*128} {parent.BlurMaster.size*pow(a,b)*128}}
crop false
name Blur7
label "\[value size.w]"
xpos 880
ypos 175
disable {{"sample < 8"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*64} {parent.BlurMaster.size*pow(a,b)*64}}
crop false
name Blur6
label "\[value size.w]"
xpos 786
ypos 175
disable {{"sample < 7"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*32} {parent.BlurMaster.size*pow(a,b)*32}}
crop false
name Blur1
label "\[value size.w]"
xpos 682
ypos 176
disable {{"sample < 6"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*16} {parent.BlurMaster.size*pow(a,b)*16}}
crop false
name Blur5
label "\[value size.w]"
xpos 578
ypos 176
disable {{"sample < 5"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*8} {parent.BlurMaster.size*pow(a,b)*8}}
crop false
name Blur4
label "\[value size.w]"
xpos 484
ypos 176
disable {{"sample < 4"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*4} {parent.BlurMaster.size*pow(a,b)*4}}
crop false
name Blur3
label "\[value size.w]"
xpos 391
ypos 175
disable {{"sample < 3"}}
}
push $N7b1ee400
Blur {
channels rgba
size {{parent.BlurMaster.size*pow(a,b)*2} {parent.BlurMaster.size*pow(a,b)*2}}
crop false
name Blur2
label "\[value size.w]"
xpos 287
ypos 176
disable {{"sample < 2"}}
}
push 0
push $N7b1ee400
Blur {
channels rgba
size {{parent.size} {parent.BlurMaster.size.w*anamorph}}
crop false
name BlurMaster
xpos 164
ypos 186
disable {{"sample == 0"}}
}
push $N7b1ee400
Merge2 {
inputs 12+1
operation plus
name MergeBlur
xpos 106
ypos 232
}
Multiply {
channels rgba
value {0.895306 0.938587 1.016107 1}
name Multiply1
xpos 106
ypos 260
}
Clamp {
channels alpha
minimum_enable false
maximum_enable {{clamp_alpha}}
name ClampAlpha
xpos 106
ypos 290
}
push $Nc66c1c00
Remove {
channels rgba
name Remove1
xpos -84
ypos 174
disable {{!parent.glow_only}}
}
Merge2 {
inputs 2
operation plus
name MergeGlow
xpos -84
ypos 296
disable {{"parent.intensity == 0"}}
}
Crop {
box {{parent.crop?0:-parent.overscan} {parent.crop?0:-parent.overscan} {parent.crop?width:width+parent.overscan} {parent.crop?height:height+parent.overscan}}
name CropOverscan
xpos -84
ypos 334
}
Output {
name Output1
xpos -84
ypos 374
}
end_group
set Nea5b5080 [stack 0]
push $N97aea800
push $N24e0f400
push $Nc6697400
Switch {
inputs 2
which {{parent.mode}}
name Switch_PreFog
label "\[value which]"
xpos -423
ypos 677
hide_input true
}
Shuffle {
in alpha
in2 rgba
alpha red
name view_alpha
xpos -296
ypos 683
}
Grade {
channels rgba
white {{parent.Opacity.white}}
name Opacity_preview
xpos -162
ypos 683
}
push $Nea5b5080
Switch {
inputs 4
which {{parent.preview}}
name Switch1
label "\[value which]"
xpos 0
ypos 677
}
Output {
name Output1
xpos 0
ypos 768
}
end_group
